Description: Manara - Scalable Web Application with ALB and Auto Scaling using cloudformation

Parameters:

  EnvironmentName:
    Description: Manara - Scalable Web Application with ALB and Auto Scaling using cloudformation
    Type: String

  VpcCIDR:
    Description: IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: IP range (CIDR notation) for the public subnet in the 1st AZ
    Type: String
    Default: 10.0.0.0/24

  PublicSubnet2CIDR:
    Description: IP range (CIDR notation) for the public subnet in the 2nd AZ
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnet1CIDR:
    Description: IP range (CIDR notation) for the private subnet in the 1st AZ
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet2CIDR:
    Description: IP range (CIDR notation) for the private subnet in the 2nd AZ
    Type: String
    Default: 10.0.3.0/24

  AMItoUse:
    Description: AMI to Use
    Type: String

  InstanceTypetoUse:
    Description: Instance Type to Use
    Type: String
    Default: t2.micro

  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: String 
    
    ################## DB Parameters and SSM Parameter Store key ##################

  dbUsername:
    Description: dbUsername
    Type: String

  dbPassword:
    Description: SSM Parameter Store key containing the database password
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /DBPassword # SSM Parameter name
    NoEcho: true 
    
############################################## Resources ##############################################

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Manara-Project
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Manara-Project
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Manara-Project
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Manara-Project
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Manara-Project
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Manara-Project
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  ##############################################   S3 Bucket and Policies   ##############################################

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${EnvironmentName}-bucket
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt EC2toS3IAMRole.Arn
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${S3Bucket}
              - !Sub arn:aws:s3:::${S3Bucket}/*

  ##############################################   Route Tables and Subnets  ##############################################

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Manara-Project
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Manara-Project
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Manara-Project
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  ############################################## EC2 Security Groups ##############################################

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  ##############################################   IAM Roles and Policies   ##############################################

  # IAM Role to allow EC2 instances to use the S3 Service
  EC2toS3IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-EC2-S3-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess # Allows the EC2 instances to access S3
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy # Allows the EC2 instances to send metrics to CloudWatch
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore # Allows the EC2 instances to be managed by SSM

      Path: /

  # This policy allows the EC2 instances to access the S3 bucket
  BucketRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${EnvironmentName}-Role-Policies-2
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Action: '*'
          Resource:
            - arn:aws:s3:::manara-yasser-bucket
            - arn:aws:s3:::manara-yasser-bucket/*
      Roles:
        - !Ref EC2toS3IAMRole

  # IAM Instance Profile to attach the role to the EC2 instances
  # This allows the EC2 instances to assume the role and access S3

  ProfileRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2toS3IAMRole
      Path: /

  SSMRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${EnvironmentName}-SSM-Access-Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/DBPassword 
      Roles:
        - !Ref EC2toS3IAMRole

  ######################################   Web App AutoScaling Launch Template and ELB  ######################################

  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-LaunchTemplate
      LaunchTemplateData:
        ImageId: !Ref AMItoUse
        InstanceType: !Ref InstanceTypetoUse
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !GetAtt WebServerSecGroup.GroupId
        IamInstanceProfile:
          Name: !Ref ProfileRolesForOurApp
        BlockDeviceMappings:
          - DeviceName: /dev/sdk
            Ebs:
              VolumeSize: 10
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt-get update -y
            sudo apt-get install apache2 -y
            sudo systemctl start apache2.service
            sudo systemctl enable apache2.service
            cd /var/www/html
            date_time=$(date)
            date
            date_time
            echo "$date_time <h1>It works! Manara, Scalable Web Application with ALB and Auto Scaling</h1>" > index.html
      

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 6
      VpcId: !Ref VPC

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
      MinSize: '4'
      MaxSize: '8'
      TargetGroupARNs:
        - !Ref WebAppTargetGroup

  WebAppScalingPolicy: 
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebAppGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        TargetValue: 10 # 10% to test the scaling (Change to 80% for production) 
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization

  ##############################################   Load Balancing   ##############################################

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLB
      Port: '80'
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /
      ListenerArn: !Ref Listener
      Priority: 1

  ############################################## MySQL DB ##############################################

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL access from the web servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecGroup # Allow access from web servers

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets to use for the DB
      DBSubnetGroupName: Subnet Group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  DB:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete # Delete the DB when the stack is deleted. Change to "Retain" if you want to keep the DB after stack deletion.
    Properties:
      VPCSecurityGroups: 
        - !GetAtt DBSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      MultiAZ: true
      AllocatedStorage: 10
      Engine: mysql
      EngineVersion: "8.0.35"  # Supported version with t3.micro
      DBInstanceClass: db.t3.micro  # Free Tier eligible instance class
      DBInstanceIdentifier: !Sub ${EnvironmentName}-mysql-db
      MasterUsername: !Ref dbUsername
      MasterUserPassword: !Ref dbPassword # Pulls from SSM Parameter Store
      Tags:
        - Key: DBName
          Value: !Sub ${EnvironmentName} MySQL RDS
      

      ############################################## Monitoring and Alarms ##############################################

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${EnvironmentName}-Alerts
      Subscription:
        - Protocol: email
          Endpoint: yasser.a.khalfallah@gmail.com

  CPUHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: CPU utilization greater than 10% # 10% to test the scaling (Change to 80% for production) 
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
        - Name: AutoScalingGroup
          Value: !Ref WebAppGroup
      Statistic: Average
      Period: 60 # 60 seconds period for testing (Change to 300 for production)
      EvaluationPeriods: 2
      Threshold: 10 # 10% to test the scaling (Change to 80% for production)
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref SNSTopic

  RDSCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: RDS CPU utilization greater than 10% # 10% to test the scaling (Change to 80% for production) 
      Namespace: AWS/RDS
      MetricName: CPUUtilization
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref DB
      Statistic: Average
      Period: 60 # 60 seconds period for testing (Change to 300 for production)
      EvaluationPeriods: 2
      Threshold: 10 # 10% to test the scaling (Change to 80% for production)
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref SNSTopic

##############################################   Outputs   ##############################################

Outputs:

  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCID

  VPCPublicRouteTable:
    Description: Public Routing
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub ${EnvironmentName}-PUB-RT

  VPCPrivateRouteTable1:
    Description: Private Routing AZ1
    Value: !Ref PrivateRouteTable1
    Export:
      Name: !Sub ${EnvironmentName}-PRI1-RT

  VPCPrivateRouteTable2:
    Description: Private Routing AZ2
    Value: !Ref PrivateRouteTable2
    Export:
      Name: !Sub ${EnvironmentName}-PRI2-RT

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join
      - ','
      - - !Ref PublicSubnet1
        - !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PUB-NETS

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join
      - ','
      - - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PRIV-NETS

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PUB1-SN

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PUB2-SN

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PRI1-SN

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PRI2-SN

  WebAppLBDNSName:
    Description: DNS name or Public URL of the Load Balancer
    Value: !Join
      - ''
      - - http://
        - !GetAtt WebAppLB.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-LB-DNSName

  S3Bucket:
    Description: Bucket Created to store data.
    Value: !Ref S3Bucket
    Export:
      Name: !Sub ${EnvironmentName}-manara-yasser-bucket

  DBEndpoint:
    Description: RDS Endpoint Address
    Value: !GetAtt DB.Endpoint.Address
    Export:
      Name: !Sub ${EnvironmentName}-DBEndpoint

  SNSTopicARN:
    Description: SNS Topic for Alerts
    Value: !Ref SNSTopic
    Export:
      Name: !Sub ${EnvironmentName}-SNSTopic

  CloudWatchAlarms:
    Description: CloudWatch Alarm Names
    Value: !Join
      - ','
      - - !Ref CPUHighAlarm
        - !Ref RDSCPUAlarm
    Export:
      Name: !Sub ${EnvironmentName}-CloudWatchAlarms